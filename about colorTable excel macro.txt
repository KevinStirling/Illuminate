How the macro works:
1. user pastes color table from website into cell A4 (it's specificly hard-coded for the one on cloford.com).
2. user clicks Color 2 Python button
3. the macro picks up the color data and does the python code conversion for ELIF's.
More specifically, while in a loop going through each row:
a. it picks up the color name, red, green, and blue values
b. the data is concatenated into an output string, using a combination of constants and the data point variables
c. it displays the result into column N, and also the file output.txt
4. The status bar at the bottom shows the progress. The macro ends after either a blank row is found, or a predefined sentinel number of rows (1000 at the time of writing), whichever comes sooner.


A crash-course on VBA programming in Excel:

Visual Basic for Applications (VBA) is a subset of Visual Basic that's embeded into software, like each of the Microsoft Office programs and XSI Softimage for examples. The idea is an environment that directly interacts with the document or software. Excel is great to work with because the spreadsheet itself works kind of like a huge, pre-made 2-dimensional array, and is a format that's commonly used by people.


0. Enable Developer tab

This only has to be done once. Traditionally, the VBA environment wasn't always hidden by default, but recent versions do it now.

File + Options + Custom Ribbon
On the right side, check Developer. Then OK.


1. Use Macro recorder to teach yourself Excel-specific VBA code
Under the Developer tab, click Record Macro. Then try doing different things on the sheet like a regular user. Hit Stop Recording under the Developer tab to end it (older versions had a stop icon in the status bar instead). Check out the code that was automatically generated by clicking on Macros under the Dev. tab., selecting the macro ("macro1" by default), and clicking Edit. You'll be taken to the VBA environment to the Module where your code is.

2. Common commands:

' comments are done with an apostrophe at the start of a line

Dim intX as integer  ' declare (dimension) an integer. You can also do strings easily.
intX=1 ' set a value to a variable
Open "filename" for output as #1  ' opens a file for output (as opposed to input, and other modes).
close #1 ' closes file

While intX<10  ' loop
	range("A1").value = intX  ' change a spreadsheet cell value
Wend  ' end of while loop

strSomeString = a & b  ' concatenate ( "&" is a delimiter, as well as + but & is better).
cStr(intX)  '  convert something to a string (VBA does automatic conversions, but manual is faster performance)

3. Environment perks
IntelliSense - type out part of an object name, a small menu appears with related sub-objects to select (e.g: "activeworkbook.path")
Immediate - test a single line of code. like using msgbox(someVar) for a pop-up displaying a value
You can Insert GUI controls over the spreadsheet (buttons, drop-downs, etc.)
F8 - debug by running one line of code at a time
Breakpoints - click to the left of a line of code to put a red dot to tell VBA to stop running at that line.
Ctrl + Break to stop running code (great for infinite loops)


Feel free to check out my code and learn from it.
-Bill Lugo